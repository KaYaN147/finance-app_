import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–£—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤", layout="wide", initial_sidebar_state="expanded")

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
CURRENCIES = [
    'RUB', 'USD', 'EUR', 'CNY', 'GBP', 
    'VND', 'EGP', 'TRY', 'GEL'
]

# –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∞–ª—é—Ç
CURRENCY_SYMBOLS = {
    'RUB': '‚ÇΩ',
    'USD': '$',
    'EUR': '‚Ç¨',
    'CNY': '¬•',
    'GBP': '¬£',
    'VND': '‚Ç´',
    'EGP': 'E¬£',
    'TRY': '‚Ç∫',
    'GEL': '‚Çæ'
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
EXPENSE_CATEGORIES = [
    '–ü—Ä–æ–¥—É–∫—Ç—ã', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
    '–û–¥–µ–∂–¥–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–î—Ä—É–≥–æ–µ'
]
INCOME_CATEGORIES = ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–î—Ä—É–≥–æ–µ']

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def get_exchange_rates(base_currency='RUB'):
    try:
        url = f"https://api.exchangerate-api.com/v4/latest/{base_currency}"
        response = requests.get(url)
        data = response.json()
        return data['rates']
    except:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        return {currency: 1.0 if currency == base_currency else 0.0 for currency in CURRENCIES}

def convert_amount(amount, from_currency, to_currency):
    if from_currency == to_currency:
        return amount
    rates = get_exchange_rates(from_currency)
    return amount * rates.get(to_currency, 0)

def format_amount(amount, currency=None):
    currency = currency or st.session_state.default_currency
    symbol = CURRENCY_SYMBOLS.get(currency, currency)
    if currency == 'VND':  # –î–ª—è –¥–æ–Ω–≥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–µ–π–∫–∏
        return f"{int(amount):,} {symbol}"
    return f"{amount:,.2f} {symbol}"

def load_data():
    if 'transactions_data' not in st.session_state:
        st.session_state.transactions_data = []
    
    df = pd.DataFrame(st.session_state.transactions_data)
    if not df.empty and '–î–∞—Ç–∞' in df.columns:
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
    if df.empty:
        df = pd.DataFrame(columns=['–î–∞—Ç–∞', '–¢–∏–ø', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—É–º–º–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ë—é–¥–∂–µ—Ç', '–í–∞–ª—é—Ç–∞'])
    return df

def save_data(df):
    st.session_state.transactions_data = df.to_dict('records')

def load_goals():
    if 'goals_data' not in st.session_state:
        st.session_state.goals_data = []
    return st.session_state.goals_data

def save_goals(goals):
    st.session_state.goals_data = goals

def export_to_csv(df):
    export_df = df.copy()
    export_df['–î–∞—Ç–∞'] = export_df['–î–∞—Ç–∞'].dt.strftime('%d.%m.%Y')
    export_df['–°—É–º–º–∞'] = export_df.apply(
        lambda row: format_amount(abs(row['–°—É–º–º–∞']), row.get('–í–∞–ª—é—Ç–∞', st.session_state.default_currency)),
        axis=1
    )
    export_df.loc[df['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥', '–°—É–º–º–∞'] = '-' + export_df.loc[df['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥', '–°—É–º–º–∞']
    return export_df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')

def delete_transaction(index):
    st.session_state.transactions = st.session_state.transactions.drop(index).reset_index(drop=True)
    save_data(st.session_state.transactions)

def edit_transaction(index, edited_data):
    for key, value in edited_data.items():
        st.session_state.transactions.at[index, key] = value
    save_data(st.session_state.transactions)

def export_all_data():
    data = {
        'transactions': st.session_state.transactions_data,
        'goals': st.session_state.goals_data,
        'settings': {
            'default_currency': st.session_state.default_currency
        }
    }
    return json.dumps(data, ensure_ascii=False, default=str)

def import_all_data(json_str):
    try:
        data = json.loads(json_str)
        st.session_state.transactions_data = data['transactions']
        st.session_state.goals_data = data['goals']
        st.session_state.default_currency = data['settings']['default_currency']
        return True
    except:
        return False # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'transactions' not in st.session_state:
    st.session_state.transactions = load_data()

if 'goals' not in st.session_state:
    st.session_state.goals = load_goals()

if 'default_currency' not in st.session_state:
    st.session_state.default_currency = 'RUB'

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title('üí∞ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —É—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤')

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    tab1, tab2, tab3, tab4 = st.tabs(["–î–æ–±–∞–≤–∏—Ç—å", "–ë—é–¥–∂–µ—Ç", "–¶–µ–ª–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
    
    with tab1:
        st.header("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        date = st.date_input('–î–∞—Ç–∞', datetime.now())
        trans_type = st.selectbox('–¢–∏–ø', ['–†–∞—Å—Ö–æ–¥', '–î–æ—Ö–æ–¥'])
        
        categories = INCOME_CATEGORIES if trans_type == '–î–æ—Ö–æ–¥' else EXPENSE_CATEGORIES
        category = st.selectbox('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', categories)
        
        currency = st.selectbox('–í–∞–ª—é—Ç–∞', CURRENCIES, index=CURRENCIES.index(st.session_state.default_currency))
        amount = st.number_input('–°—É–º–º–∞', min_value=0.0, step=100.0)
        
        if currency != st.session_state.default_currency:
            converted_amount = convert_amount(amount, currency, st.session_state.default_currency)
            st.write(f"–ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {format_amount(converted_amount, st.session_state.default_currency)}")
        
        description = st.text_input('–û–ø–∏—Å–∞–Ω–∏–µ')
        
        if st.button('–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'):
            final_amount = amount if currency == st.session_state.default_currency else converted_amount
            new_transaction = pd.DataFrame([{
                '–î–∞—Ç–∞': pd.to_datetime(date),
                '–¢–∏–ø': trans_type,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
                '–°—É–º–º–∞': final_amount if trans_type == '–î–æ—Ö–æ–¥' else -final_amount,
                '–û–ø–∏—Å–∞–Ω–∏–µ': f"{description} ({amount} {currency})" if currency != st.session_state.default_currency else description,
                '–ë—é–¥–∂–µ—Ç': 0,
                '–í–∞–ª—é—Ç–∞': st.session_state.default_currency
            }])
            st.session_state.transactions = pd.concat(
                [st.session_state.transactions, new_transaction],
                ignore_index=True
            )
            save_data(st.session_state.transactions)
            st.success('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            st.rerun()

    with tab2:
        st.header("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç")
        category_budget = st.selectbox('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –±—é–¥–∂–µ—Ç–∞', EXPENSE_CATEGORIES)
        budget_amount = st.number_input('–ú–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç', min_value=0.0, step=1000.0)
        if st.button('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç'):
            mask = st.session_state.transactions['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category_budget
            if not mask.any():
                new_row = pd.DataFrame([{
                    '–î–∞—Ç–∞': pd.to_datetime(datetime.now()),
                    '–¢–∏–ø': '–†–∞—Å—Ö–æ–¥',
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category_budget,
                    '–°—É–º–º–∞': 0,
                    '–û–ø–∏—Å–∞–Ω–∏–µ': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞',
                    '–ë—é–¥–∂–µ—Ç': budget_amount,
                    '–í–∞–ª—é—Ç–∞': st.session_state.default_currency
                }])
                st.session_state.transactions = pd.concat(
                    [st.session_state.transactions, new_row],
                    ignore_index=True
                )
            else:
                st.session_state.transactions.loc[mask, '–ë—é–¥–∂–µ—Ç'] = budget_amount
            save_data(st.session_state.transactions)
            st.success('–ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')

    with tab3:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏")
        goal_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏")
        goal_amount = st.number_input("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞", min_value=0.0, step=1000.0)
        goal_deadline = st.date_input("–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å"):
            new_goal = {
                "name": goal_name,
                "target_amount": goal_amount,
                "deadline": goal_deadline.strftime("%Y-%m-%d"),
                "current_amount": 0
            }
            st.session_state.goals.append(new_goal)
            save_goals(st.session_state.goals)
            st.success("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    with tab4:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        new_default_currency = st.selectbox(
            '–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞',
            CURRENCIES,
            index=CURRENCIES.index(st.session_state.default_currency)
        )
        if new_default_currency != st.session_state.default_currency:
            st.session_state.default_currency = new_default_currency
            st.success(f"–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_default_currency}")
        
        st.subheader("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"):
                data = export_all_data()
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                    data,
                    "finance_backup.json",
                    "application/json"
                )
        
        with col2:
            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", type=['json'])
            if uploaded_file is not None:
                content = uploaded_file.read().decode()
                if import_all_data(content):
                    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö") 
# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
tab1, tab2, tab3, tab4 = st.tabs(["üìä –û–±–∑–æ—Ä", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìù –ò—Å—Ç–æ—Ä–∏—è", "üéØ –¶–µ–ª–∏"])

with tab1:
    col1, col2, col3 = st.columns(3)
    
    with col1:
        total_balance = st.session_state.transactions['–°—É–º–º–∞'].sum()
        st.metric('–û–±—â–∏–π –±–∞–ª–∞–Ω—Å', format_amount(total_balance))
    
    with col2:
        income = st.session_state.transactions[
            st.session_state.transactions['–°—É–º–º–∞'] > 0
        ]['–°—É–º–º–∞'].sum()
        st.metric('–û–±—â–∏–π –¥–æ—Ö–æ–¥', format_amount(income))
    
    with col3:
        expenses = abs(st.session_state.transactions[
            st.session_state.transactions['–°—É–º–º–∞'] < 0
        ]['–°—É–º–º–∞'].sum())
        st.metric('–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', format_amount(expenses))

    if not st.session_state.transactions.empty:
        col1, col2 = st.columns(2)
        
        with col1:
            expenses_df = st.session_state.transactions[st.session_state.transactions['–°—É–º–º–∞'] < 0]
            if not expenses_df.empty:
                fig_pie = px.pie(
                    expenses_df,
                    values='–°—É–º–º–∞',
                    names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                    title='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤'
                )
                st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            if len(st.session_state.transactions) > 1:
                daily_balance = st.session_state.transactions.groupby('–î–∞—Ç–∞')['–°—É–º–º–∞'].sum().cumsum()
                fig_line = px.line(
                    daily_balance,
                    title='–î–∏–Ω–∞–º–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
                    labels={'value': '–ë–∞–ª–∞–Ω—Å', '–î–∞—Ç–∞': '–î–∞—Ç–∞'}
                )
                st.plotly_chart(fig_line, use_container_width=True)

with tab2:
    if not st.session_state.transactions.empty:
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input('–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞', 
                                    min(st.session_state.transactions['–î–∞—Ç–∞']),
                                    key='analysis_start_date')
        with col2:
            end_date = st.date_input('–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞', 
                                    max(st.session_state.transactions['–î–∞—Ç–∞']),
                                    key='analysis_end_date')
        
        filtered_df = st.session_state.transactions[
            (st.session_state.transactions['–î–∞—Ç–∞'] >= pd.to_datetime(start_date)) &
            (st.session_state.transactions['–î–∞—Ç–∞'] <= pd.to_datetime(end_date))
        ]
        
        st.subheader('–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        expenses_analysis = filtered_df[filtered_df['–°—É–º–º–∞'] < 0].groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è').agg({
            '–°—É–º–º–∞': ['sum', 'count']
        }).round(2)
        expenses_analysis.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π']
        expenses_analysis['–û–±—â–∞—è —Å—É–º–º–∞'] = expenses_analysis['–û–±—â–∞—è —Å—É–º–º–∞'].apply(
            lambda x: format_amount(abs(x))
        )
        st.dataframe(expenses_analysis, use_container_width=True)
        
        if not filtered_df.empty:
            monthly_expenses = filtered_df[filtered_df['–°—É–º–º–∞'] < 0].groupby(
                pd.Grouper(key='–î–∞—Ç–∞', freq='M')
            )['–°—É–º–º–∞'].sum().abs()
            
            if not monthly_expenses.empty:
                fig_monthly = px.bar(
                    monthly_expenses,
                    title='–†–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º',
                    labels={'value': '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤', '–î–∞—Ç–∞': '–ú–µ—Å—è—Ü'}
                )
                st.plotly_chart(fig_monthly, use_container_width=True)

with tab3:
    col1, col2, col3 = st.columns(3)
    with col1:
        type_filter = st.multiselect('–¢–∏–ø', ['–î–æ—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥'], default=['–î–æ—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥'])
    with col2:
        category_filter = st.multiselect('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', EXPENSE_CATEGORIES + INCOME_CATEGORIES)
    with col3:
        min_amount = st.number_input('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞', value=0.0, key='history_min_amount')

    filtered_history = st.session_state.transactions.copy()
    if type_filter:
        filtered_history = filtered_history[filtered_history['–¢–∏–ø'].isin(type_filter)]
    if category_filter:
        filtered_history = filtered_history[filtered_history['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(category_filter)]
    filtered_history = filtered_history[abs(filtered_history['–°—É–º–º–∞']) >= min_amount]

    if not filtered_history.empty:
        st.write("### –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        for index, row in filtered_history.sort_values('–î–∞—Ç–∞', ascending=False).iterrows():
            with st.expander(f"{row['–î–∞—Ç–∞'].strftime('%d.%m.%Y')} - {row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']} - {format_amount(row['–°—É–º–º–∞'])}"):
                edit_col1, edit_col2 = st.columns([3, 1])
                
                with edit_col1:
                    edited_date = st.date_input(
                        "–î–∞—Ç–∞",
                        row['–î–∞—Ç–∞'],
                        key=f"date_{index}"
                    )
                    edited_type = st.selectbox(
                        "–¢–∏–ø",
                        ['–î–æ—Ö–æ–¥', '–†–∞—Å—Ö–æ–¥'],
                        index=0 if row['–¢–∏–ø'] == '–î–æ—Ö–æ–¥' else 1,
                        key=f"type_{index}"
                    )
                    edited_category = st.selectbox(
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                        INCOME_CATEGORIES if edited_type == '–î–æ—Ö–æ–¥' else EXPENSE_CATEGORIES,
                        index=(INCOME_CATEGORIES if edited_type == '–î–æ—Ö–æ–¥' else EXPENSE_CATEGORIES).index(row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']),
                        key=f"category_{index}"
                    )
                    edited_currency = st.selectbox(
                        "–í–∞–ª—é—Ç–∞",
                        CURRENCIES,
                        index=CURRENCIES.index(row['–í–∞–ª—é—Ç–∞'] if pd.notna(row['–í–∞–ª—é—Ç–∞']) else 'RUB'),
                        key=f"currency_{index}"
                    )
                    edited_amount = st.number_input(
                        "–°—É–º–º–∞",
                        value=abs(float(row['–°—É–º–º–∞'])),
                        min_value=0.0,
                        key=f"amount_{index}"
                    )
                    edited_description = st.text_input(
                        "–û–ø–∏—Å–∞–Ω–∏–µ",
                        value=row['–û–ø–∏—Å–∞–Ω–∏–µ'],
                        key=f"desc_{index}"
                    )
                
                with edit_col2:
                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"save_{index}"):
                        final_amount = edited_amount
                        if edited_currency != st.session_state.default_currency:
                            final_amount = convert_amount(edited_amount, edited_currency, st.session_state.default_currency)
                        
                        edited_data = {
                            '–î–∞—Ç–∞': pd.to_datetime(edited_date),
                            '–¢–∏–ø': edited_type,
                            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': edited_category,
                            '–°—É–º–º–∞': final_amount if edited_type == '–î–æ—Ö–æ–¥' else -final_amount,
                            '–û–ø–∏—Å–∞–Ω–∏–µ': f"{edited_description} ({edited_amount} {edited_currency})" if edited_currency != st.session_state.default_currency else edited_description,
                            '–í–∞–ª—é—Ç–∞': st.session_state.default_currency
                        }
                        edit_transaction(index, edited_data)
                        st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        st.rerun()
                    
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"delete_{index}"):
                        delete_transaction(index)
                        st.success("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!")
                        st.rerun()

        col1, col2 = st.columns(2)
        with col1:
            if st.button('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV'):
                csv_data = export_to_csv(filtered_history)
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å CSV",
                    csv_data,
                    "finance_export.csv",
                    "text/csv",
                    key='download_csv'
                )

with tab4:
    st.subheader("–ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏")
    
    for idx, goal in enumerate(st.session_state.goals):
        col1, col2, col3 = st.columns([2,1,1])
        
        with col1:
            st.write(f"**{goal['name']}**")
            progress = (goal['current_amount'] / goal['target_amount']) * 100 if goal['target_amount'] > 0 else 0
            st.progress(min(progress/100, 1.0))
            
        with col2:
            st.write(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
            st.write(f"–û—Å—Ç–∞–ª–æ—Å—å: {format_amount(goal['target_amount'] - goal['current_amount'])}")
            
        with col3:
            contribution = st.number_input(
                "–í–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                min_value=0.0,
                step=100.0,
                key=f"goal_{idx}"
            )
            if st.button("–í–Ω–µ—Å—Ç–∏", key=f"contribute_{idx}"):
                st.session_state.goals[idx]['current_amount'] += contribution
                save_goals(st.session_state.goals)
                
                new_transaction = pd.DataFrame([{
                    '–î–∞—Ç–∞': pd.to_datetime(datetime.now()),
                    '–¢–∏–ø': '–†–∞—Å—Ö–æ–¥',
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è',
                    '–°—É–º–º–∞': -contribution,
                    '–û–ø–∏—Å–∞–Ω–∏–µ': f"–í–∫–ª–∞–¥ –≤ —Ü–µ–ª—å: {goal['name']}",
                    '–ë—é–¥–∂–µ—Ç': 0,
                    '–í–∞–ª—é—Ç–∞': st.session_state.default_currency
                }])
                st.session_state.transactions = pd.concat(
                    [st.session_state.transactions, new_transaction],
                    ignore_index=True
                )
                save_data(st.session_state.transactions)
                st.success("–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–Ω–µ—Å–µ–Ω—ã!")
                st.rerun()